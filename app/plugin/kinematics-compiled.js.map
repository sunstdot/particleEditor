{"version":3,"sources":["kinematics.js"],"names":[],"mappings":";;;;;AAKA,IAAI,YAAY,EAAhB;AACA,OAAO,QAAP,MAAqB,YAArB,C;AACA,OAAO,KAAP,MAAkB,SAAlB,C;AACA,OAAO,OAAP,MAAoB,WAApB,C;AACA,OAAO,KAAP,MAAkB,SAAlB;AACA,OAAO,cAAP,MAA2B,0BAA3B;AACA,IAAI,WAAW,SAAS,cAAT,CAAwB,aAAxB,CAAf;AACA,IAAI,MAAM,SAAS,UAAT,CAAoB,IAApB,CAAV;;AAEA,IAAI,KAAK,IAAI,cAAJ,EAAT;AACA,IAAI,eAAe,CAAnB,C;AACA,IAAI,KAAK,IAAT;AACA,IAAI,SAAJ;;AAEA,IAAI,mBAAmB,QAAQ,IAA/B;IAAoC,mBAAmB,QAAQ,IAA/D;;AAEA,SAAS,WAAT,GAAsB;AACpB,QAAG,OAAO,IAAV,EAAe;AACX,YAAI,IAAJ;AACA,YAAI,SAAJ,GAAc,oBAAd;AACA,YAAI,QAAJ,CAAa,CAAb,EAAe,CAAf,EAAiB,SAAS,KAA1B,EAAgC,SAAS,MAAzC;AACA,YAAI,OAAJ;AACH;AACF;;AAED,IAAI,eAAe,IAAK,YAAU;AAChC,QAAI,SAAS,YAAU,CAAE,CAAzB;AACA,WAAO,SAAP,CAAiB,eAAjB,GAAmC,YAAU;AAC3C,YAAI,QAAQ,KAAK,MAAL,KAAc,CAAd,GAAgB,KAAK,EAAjC;AACA,eAAO,IAAI,OAAJ,CAAY,KAAK,GAAL,CAAS,KAAT,CAAZ,EAA6B,KAAK,GAAL,CAAS,KAAT,CAA7B,CAAP;AACD,KAHD;AAIA,WAAO,SAAP,CAAiB,WAAjB,GAA+B,YAAU;AACvC,YAAI,IAAI,KAAK,MAAL,EAAR;AACA,eAAO,OAAO,QAAP,CAAgB,CAAhB,EAAmB,GAAnB,CAAuB,OAAO,QAAP,CAAgB,IAAE,CAAlB,CAAvB,CAAP;AACD,KAHD;AAIA,WAAO,SAAP,CAAiB,YAAjB,GAAgC,YAAU;AACxC,YAAI,IAAI,KAAK,MAAL,EAAR;AACA,eAAO,OAAK,CAAL,GAAO,QAAM,IAAE,CAAR,CAAd;AACD,KAHD;AAIA,WAAO,MAAP;AACD,CAfkB,EAAnB;;;AAkBA,IAAI,OAAO;;AAEP,UAAM,YAAY;AACd,YAAI,WAAW,iBAAiB,SAAjB,CAA2B,gBAA3B,EAA6C,QAA7C,CAAsD,EAAtD,CAAf;AACA,mBAAW,SAAS,GAAT,CAAa,aAAa,eAAb,CAA6B,CAA7B,EAA+B,KAAK,EAAL,GAAQ,CAAvC,CAAb,EAAwD,QAAxD,CAAiE,EAAjE,CAAX;AACA,YAAI,QAAQ,aAAa,WAAb,CAAyB,MAAM,GAA/B,EAAmC,MAAM,MAAzC,CAAZ;AACA,YAAI,OAAO,aAAa,YAAb,CAA0B,CAA1B,EAA4B,CAA5B,CAAX;AACA,YAAI,OAAO,aAAa,YAAb,CAA0B,CAA1B,EAA4B,CAA5B,CAAX;AACA,WAAG,IAAH,CAAQ,IAAI,QAAJ,CAAa,gBAAb,EAA+B,QAA/B,EAAwC,IAAxC,EAA6C,KAA7C,EAAmD,IAAnD,CAAR;AACA,2BAAmB,gBAAnB;AACA,WAAG,QAAH,CAAY,EAAZ;AACA;;AAEA,WAAG,MAAH,CAAU,GAAV;AACH;AAdM,CAAX;;AAiBA,SAAS,aAAT,CAAuB,KAAvB,EAA8B;AAC1B,QAAI,OAAO,MAAM,IAAjB;;AAEA,YAAQ,GAAR,CAAY,iBAAiB,IAA7B;AACH;;;AAGD,SAAS,aAAT,CAAuB,KAAvB,EAA8B;AAC1B,QAAI,cAAc,MAAM,WAAxB;QAAqC,eAAe,MAAM,YAA1D;AACA,YAAQ,GAAR,CAAY,cAAc,mBAAd,GAAoC,YAAhD;;AAEH;;AAGD,SAAS,WAAT,GAAuB;AACnB,QAAI,SAAJ,CAAc,CAAd,EAAgB,CAAhB,EAAkB,SAAS,KAA3B,EAAkC,SAAS,MAA3C;AACA,QAAI,SAAJ,GAAgB,oBAAhB;AACA,QAAI,QAAJ,CAAa,CAAb,EAAgB,CAAhB,EAAmB,SAAS,KAA5B,EAAmC,SAAS,MAA5C;AACH;AACD,SAAS,SAAT,GAAqB;AACjB,UAAM,QAAN,CAAe,eAAf,EAAgC,cAAc,IAAd,CAAmB,IAAnB,CAAhC;AACA,UAAM,QAAN,CAAe,eAAf,EAAgC,cAAc,IAAd,CAAmB,IAAnB,CAAhC;;AAEA,QAAI,UAAU,SAAS,cAAT,CAAwB,SAAxB,CAAd;AACA,QAAG,OAAH,EAAW;AACP,gBAAQ,gBAAR,CAAyB,OAAzB,EAAiC,UAAS,CAAT,EAAW;;AAExC,gBAAG,CAAC,SAAJ,EAAc;AACV,4BAAY,YAAY,YAAU;AAC9B,yBAAK,IAAL;AACH,iBAFW,EAEV,EAFU,CAAZ;AAGH;AACJ,SAPD;AAQH;;AAED,QAAI,UAAU,SAAS,cAAT,CAAwB,SAAxB,CAAd;AACA,QAAG,OAAH,EAAW;AACP,gBAAQ,gBAAR,CAAyB,OAAzB,EAAiC,YAAU;AACvC,gBAAG,SAAH,EAAa;AACT,8BAAc,SAAd;AACA,4BAAY,SAAZ;AACA,mBAAG,KAAH;AACA;AACH;AACJ,SAPD;AAQH;AACD,aAAS,gBAAT,CAA0B,WAA1B,EAAsC,UAAS,CAAT,EAAW;AAC7C,YAAG,EAAE,MAAF,IAAY,EAAE,MAAF,IAAW,CAA1B,EAA4B;;AACxB,cAAE,MAAF,CAAS,KAAT,CAAe,QAAf,GAA0B,UAA1B;AACA,+BAAmB,IAAI,OAAJ,CAAY,EAAE,MAAd,EAAsB,EAAE,MAAxB,CAAnB;AACH,SAHD,MAGK;AACD,+BAAmB,IAAI,OAAJ,CAAY,EAAE,OAAd,EAAuB,EAAE,OAAzB,CAAnB;AACH;AACJ,KAPD;AAQH;AACD,UAAU,IAAV,GAAiB,YAAY;AACzB,QAAG,CAAC,QAAJ,EAAa;AACT;AACH;AACD;AACA;AACH,CAND;AAOA,eAAe,SAAf","file":"kinematics-compiled.js","sourcesContent":["/**\r\n * 粒子运动学控制中枢\r\n * 负责调用抽象层的粒子类，控制其表现，同时与其他插件进行通信，改变状态\r\n * add by Sunst\r\n */\r\nlet component = {};\r\nimport Particle from \"./particle\";  //引入粒子\r\nimport Color from \"./Color\";  //引入颜色设置\r\nimport vector2 from \"./vector2\";  //引入向量\r\nimport event from \"./event\";\r\nimport ParticleSystem from \"../widget/particleSystem\";\r\nlet myCanvas = document.getElementById(\"mainPainter\");\r\nlet ctx = myCanvas.getContext(\"2d\");\r\n\r\nlet ps = new ParticleSystem();\r\nlet acceleration = 0;  //初始加速度设置为0\r\nlet dt = 0.01;\r\nlet playtimer;\r\n//设置鼠标交互\r\nlet oldMousePosition = vector2.zero,newMousePosition = vector2.zero;\r\n\r\nfunction clearCanvas(){\r\n  if(ctx != null){\r\n      ctx.save();\r\n      ctx.fillStyle=\"rgba(0, 0, 0, 0.1)\";\r\n      ctx.fillRect(0,0,myCanvas.width,myCanvas.height);\r\n      ctx.restore();\r\n  }\r\n}\r\n\r\nlet SampleOption = new (function(){\r\n  let sample = function(){};\r\n  sample.prototype.sampleDirection = function(){\r\n    let theta = Math.random()*2*Math.PI;\r\n    return new vector2(Math.cos(theta), Math.sin(theta));\r\n  };\r\n  sample.prototype.sampleColor = function(){\r\n    let t = Math.random();\r\n    return color1.multiply(t).add(color2.multiply(1-t));\r\n  };\r\n  sample.prototype.sampleNumber = function(){\r\n    let t = Math.random();\r\n    return num1*t+num2*(1-t);\r\n  };\r\n  return sample;\r\n})();\r\n\r\n//todo 还是得引入类的思想，将速度，位置等的改变封装起来，做速度类，提供速度的add，multi，minus等方法？还是提供一个粒子类\r\nlet core = {\r\n    //循环积分展示粒子运动轨迹\r\n    loop: function () {\r\n        let velocity = newMousePosition.substract(oldMousePosition).multiply(10);\r\n        velocity = velocity.add(SampleOption.sampleDirection(0,Math.PI*2)).multiply(10);\r\n        let color = SampleOption.sampleColor(Color.red,Color.yellow);\r\n        let life = SampleOption.sampleNumber(1,2);\r\n        let size = SampleOption.sampleNumber(2,4);\r\n        ps.emit(new Particle(newMousePosition, velocity,life,color,size));\r\n        oldMousePosition = newMousePosition;\r\n        ps.simulate(dt);\r\n        clearCanvas();\r\n        //todo 根据选择的特效类型进行绘制\r\n        ps.render(ctx);\r\n    }\r\n};\r\n//选择一个特效纹理\r\nfunction selectTexture(param) {\r\n    let type = param.type;\r\n    //todo 拿到了一种特效类型,下次start时候需要绘制出来\r\n    console.log(\"------------\" + type);\r\n}\r\n\r\n//修改特效重力场\r\nfunction modifyGravity(param) {\r\n    let downGravity = param.downGravity, rightGravity = param.rightGravity;\r\n    console.log(downGravity + \"-----------------\" + rightGravity);\r\n    //todo 修改粒子的加速度,所有粒子共用一个gravity和velocity，只要修改即可\r\n}\r\n\r\n\r\nfunction painterInit() {\r\n    ctx.clearRect(0,0,myCanvas.width, myCanvas.height);\r\n    ctx.fillStyle = \"rgba(0, 0, 0, 0.5)\";\r\n    ctx.fillRect(0, 0, myCanvas.width, myCanvas.height);\r\n}\r\nfunction bindEvent() {\r\n    event.register(\"selectTexture\", selectTexture.bind(this));\r\n    event.register(\"modifyGravity\", modifyGravity.bind(this));\r\n    //绑定开始按钮\r\n    let playBtn = document.getElementById(\"playBtn\");\r\n    if(playBtn){\r\n        playBtn.addEventListener(\"click\",function(e){\r\n            //循环播放\r\n            if(!playtimer){\r\n                playtimer = setInterval(function(){\r\n                    core.loop();\r\n                },10);\r\n            }\r\n        });\r\n    }\r\n    //绑定结束按钮\r\n    let stopBtn = document.getElementById(\"stopBtn\");\r\n    if(stopBtn){\r\n        stopBtn.addEventListener(\"click\",function(){\r\n            if(playtimer){\r\n                clearInterval(playtimer);\r\n                playtimer = undefined;\r\n                ps.clear();\r\n                painterInit();\r\n            }\r\n        });\r\n    }\r\n    myCanvas.addEventListener(\"mousemove\",function(e){\r\n        if(e.layerX || e.layerX ==0){  //firefox\r\n            e.target.style.position = 'relative';\r\n            newMousePosition = new vector2(e.layerX, e.layerY);\r\n        }else{\r\n            newMousePosition = new vector2(e.offsetX, e.offsetY);\r\n        }\r\n    });\r\n}\r\ncomponent.exec = function () {\r\n    if(!myCanvas){\r\n        return;\r\n    }\r\n    bindEvent();\r\n    painterInit();\r\n};\r\nexport default component;\r\n"]}