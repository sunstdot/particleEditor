{"version":3,"sources":["login.js"],"names":[],"mappings":";;;;AAIA,IAAI,YAAY,EAAhB;AACA,IAAI,WAAW,QAAQ,YAAR,CAAf;AACA,IAAI,WAAW,QAAQ,YAAR,CAAf;;AAEA,IAAI,WAAW,IAAI,OAAJ,CAAY,sBAAZ,GAAf;;AAEA,IAAI,gBAAgB,QAAQ,qBAAR,CAApB;;AAGA,IAAI,QAAQ,SAAS,MAAT,CAAgB;AACxB,YAAQ,EADgB;AAExB,cAAU,QAFc;;AAIxB,yBAAqB,UAAU,OAAV,EAAmB,MAAnB,EAA2B;AAC5C,YAAI,SAAS,cAAT,CAAwB,OAAxB,CAAJ,EAAsC;AAClC;AACH;AACD,YAAI,QAAQ,SAAS,aAAT,CAAuB,OAAvB,CAAZ;AACA,cAAM,EAAN,GAAW,OAAX;;;;;;AAMA,SAAC,SAAS,oBAAT,CAA8B,MAA9B,EAAsC,CAAtC,KAA4C,SAAS,IAAtD,EAA4D,WAA5D,CAAwE,KAAxE;AACA,YAAI,MAAM,UAAV,EAAsB;;AAClB,kBAAM,UAAN,CAAiB,OAAjB,GAA2B,MAA3B;AACH,SAFD,MAEO;;AACH,kBAAM,WAAN,CAAkB,SAAS,cAAT,CAAwB,MAAxB,CAAlB;AACH;AACJ,KArBuB;;AAuBxB,aAAS,YAAY;AACjB,YAAI,OAAO,IAAX;AACA,aAAK,mBAAL,CAAyB,QAAzB,EAAmC,YAAnC;AACA,YAAI,YAAY;AACZ,kBAAM,SADM;AAEZ,kBAAM,KAFM;AAGZ,iBAAK,IAHO;AAIZ,oBAAQ;AAJI,SAAhB;;;AAQA,YAAI,OAAO,IAAI,GAAJ,CAAQ;AACf,gBAAI,iBADW;AAEf,kBAAM;AACF,0BAAU,CAAC,SAAD,CADR;AAEF,0BAAU,EAFR;AAGF,0BAAU;AAHR,aAFS;;AAQf,qBAAS,EARM;AASf,qBAAS;AACL,yBAAS,YAAY;;AAEjB,wBAAI,WAAW,KAAK,QAApB;AACA,wBAAI,WAAW,KAAK,QAApB;;AAEA,wBAAI,aAAa,EAAb,IAAmB,SAAS,IAAT,OAAoB,EAAvC,IAA6C,aAAa,EAA1D,IAAgE,SAAS,IAAT,OAAoB,EAAxF,EAA4F;AACxF;AACH;AACD,4BAAQ,GAAR,CAAY,WAAW,WAAX,GAAyB,QAArC;;AAEA,wBAAI,QAAQ;AACR,kCAAU,QADF;AAER,kCAAU;AAFF,qBAAZ;;AAKA,wBAAI,UAAU;AACV,8BAAM,KADI;AAEV,6BAAK;AAFK,qBAAd;;AAKA,kCAAc,OAAd;AACH;AAtBI;AATM,SAAR,CAAX;AAkCH;AApEuB,CAAhB,CAAZ;;;AAwEA,SAAS,SAAT,GAAqB;AACjB,YAAQ,GAAR,CAAY,QAAZ;AACH;;AAED,UAAU,IAAV,GAAiB,YAAY;AACzB,QAAI,KAAJ,CAAU;AACN,oBAAY,EAAE,aAAF;AADN,KAAV;;AAIA,UAAM,OAAN;AACH,CAND;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,eAAe,SAAf","file":"login-compiled.js","sourcesContent":["/**\r\n * 组件化开发尝试\r\n * Created by sunshitao on 2016/3/10.\r\n */\r\nvar component = {};\r\nvar loginTpl = require('./logintpl');\r\nvar loginCss = require('./loginCss');\r\n\r\nvar RichBase = new require(\"../../class/richbase\")();\r\n\r\nvar httpInterface = require('../../app/interface');\r\n\r\n\r\nvar Login = RichBase.extend({\r\n    EVENTS: {},\r\n    template: loginTpl,\r\n    //私有方法\r\n    includeStyleElement: function (styleId, styles) {\r\n        if (document.getElementById(styleId)) {\r\n            return\r\n        }\r\n        var style = document.createElement(\"style\");\r\n        style.id = styleId;\r\n        //这里最好给ie设置下面的属性\r\n        /*if (isIE()) {\r\n         style.type = “text/css”;\r\n         style.media = “screen”\r\n         }*/\r\n        (document.getElementsByTagName(\"head\")[0] || document.body).appendChild(style);\r\n        if (style.styleSheet) { //for ie\r\n            style.styleSheet.cssText = styles;\r\n        } else {//for w3c\r\n            style.appendChild(document.createTextNode(styles));\r\n        }\r\n    },\r\n    //登陆框初始化\r\n    vueInit: function () {\r\n        var self = this;\r\n        self.includeStyleElement(loginCss, 'loginStyle');\r\n        var dataModel = {\r\n            word: \"welcome\",\r\n            name: \"用户名\",\r\n            pwd: \"密码\",\r\n            btname: '登录'\r\n        };\r\n        //获取login.html并将其添加到div中\r\n        //带提示栏的用户输入框\r\n        var demo = new Vue({\r\n            el: '#loginContainer',\r\n            data: {\r\n                branches: [dataModel],\r\n                username: \"\",\r\n                password: \"\"\r\n            },\r\n            //计算方法,详见http://cn.vuejs.org/guide/computed.html\r\n            compute: {},\r\n            methods: {\r\n                doLogin: function () {\r\n                    //执行登陆操作\r\n                    var username = this.username;\r\n                    var password = this.password;\r\n\r\n                    if (username === '' || username.trim() === '' || password === '' || password.trim() === '') {\r\n                        return;\r\n                    }\r\n                    console.log(username + \"=========\" + password);\r\n\r\n                    var param = {\r\n                        username: username,\r\n                        password: password\r\n                    };\r\n\r\n                    var options = {\r\n                        data: param,\r\n                        url: 'login'\r\n                    };\r\n                    //调用接口\r\n                    httpInterface(options);\r\n                }\r\n            }\r\n        })\r\n    }\r\n});\r\n\r\n//登陆注册事件绑定\r\nfunction bindEvent() {\r\n    console.log('heihei')\r\n}\r\n\r\ncomponent.exec = function () {\r\n    new Login({\r\n        parentNode: $('#loginPanel')\r\n    });\r\n\r\n    Login.vueInit();\r\n};\r\n\r\n//==============================================================组件化探索===================================================================\r\n//    //定义新元素\r\n//    var XFooProto = Object.create(HtmlElement.prototype);\r\n//    //生命周期相关\r\n//    XFooProto.readyCallback = function(){\r\n//        this.textContent = \"i'm x-foo\";\r\n//    };\r\n//    //设置js的方法\r\n//    XFooProto.foo = function(){\r\n//        console.log(\"foo() is called\");\r\n//    };\r\n//\r\n//    var XFoo = document.register('foo',{prototype:XFooProto});\r\n//\r\n//\r\n//    //shadow dom 组件化开发,使用者只需要引入login.js和<div type=\"login\"></div>就能完美实现登陆组件\r\n//\r\n//\r\n//    var node = document.querySelector(\"div\");\r\n//    var root = node.createShadowRoot();\r\n//\r\n//    root.innerHTML = loginTpl;  //将模板值付给textContent\r\n\r\nexport default component;\r\n"]}